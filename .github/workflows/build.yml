name: Build and Push

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper version number and to generate Sentry release
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Determine version from git
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=edge,branch=main
      
      # Get the current version and commit SHA for Sentry
      - name: Set Sentry Environment Variables
        id: sentry_env
        run: |
          # Get latest tag or use 0.0.0 if no tag exists
          RELEASE=$(git describe --tags --always --abbrev=0 2>/dev/null || echo "0.0.0-$(git rev-parse --short HEAD)")
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "SENTRY_RELEASE=${RELEASE}" >> $GITHUB_ENV
          echo "SENTRY_GIT_COMMIT_SHA=${COMMIT_SHA}" >> $GITHUB_ENV
          echo "Release: ${RELEASE}, Commit: ${COMMIT_SHA}"
      
      # Build and push Docker image
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SENTRY_RELEASE=${{ env.SENTRY_RELEASE }}
            SENTRY_GIT_COMMIT_SHA=${{ env.SENTRY_GIT_COMMIT_SHA }}
      
      # Create or update a version.txt file in the repo
      - name: Create version.txt
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo $VERSION > version.txt
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git add version.txt
          git commit -m "Update version.txt to $VERSION"
          git push 